###############################################
# Lenses 2.3 Security Sample Configuration File
###############################################

## Security mode is mandatory. It sets the authentication mechanism used by
## Lenses. It applies to users, for service accounts look at the bottom of this
## sample file. Security mode must be
## - BASIC      : accounts and passwords are set in this file, Lenses monitor it
##                for changes and update accordingly
## - LDAP       : accounts are read by an LDAP server
## - KERBEROS   : accounts are read via SPNEGO, the browser providing
##                authentication tokens via GSSAPI (Kerberos)
## - CUSTOM_HTTP: An authentication proxy injects requests with authentication
##                headers and a user provided class in Lenses is used to parse
##                them.

lenses.security.mode = BASIC # BASIC | LDAP | KERBEROS | CUSTOM_HTTP

## Mandatory option, a list with at least one user group and its permissions.
## Lenses Security Model uses groups to assign permissions to groups of users.
## For the BASIC mode, group assignment is direct, for LDAP the groups below
## should map to LDAP groups, for KERBEROS you also have to set custom mappings
## in the Kerberos section, whilst CUSTOM_HTTP is expected to return the set
## groups.

#lenses.security.groups = [
#  {"name": "adminGroup", "roles": ["Admin", "DataPolicyWrite", "AlertsWrite", "TableStorageWrite"]},
#  {"name": "writeGroup", "roles": ["Write", "AlertsWrite", "TableStorageWrite", "DataPolicyRead"]},
#  {"name": "readGroup",  "roles": ["Read", "AlertsRead", "TableStorageRead"]},
#  # Multi-tenancy: This group has read/write whitelisted access to particular topics
#  {"name": "equityUK", "roles": ["Read", "Write"], topic: { whitelist: ["equity_.*"] } },
#  # Multi-tenancy: This group has read level access to all topics, except those starting with 'private_'
#  {"name": "viewPublic", "roles": ["Read"], topic: { blacklist: ["private_.*"] } }
#]

lenses.security.groups = [
  {"name": "adminGroup", "roles": ["Admin", "DataPolicyWrite", "AlertsWrite", "TableStorageWrite"]},
  {"name": "readGroup",  "roles": ["Read", "AlertsRead", "TableStorageRead"]}
]


###############
# BASIC OPTIONS
###############

## Mandatory, a list of user accounts.

#lenses.security.users = [
#  {"username": "admin", "password": "admin", "displayname": "Lenses Admin", "groups": ["adminGroup"]},
#  {"username": "write", "password": "write", "displayname": "Write User", "groups": ["writeGroup"]},
#  {"username": "read", "password": "read", "displayname": "Read Only", "groups": ["readGroup"]},
#  # This user has can only read & write topics starting with: equity_
#  {"username": "traderUK", "password": "pass", "displayname": "Trader", "groups": ["equityUK"]},
#  # This user can view only non-private topics
#  {"username": "publicA", "password": "pass", "displayname": "Public", "groups": ["viewPublic"]}
#]
lenses.security.users = [
  {"username": "admin", "password": "bakaphel", "displayname": "Lenses Admin", "groups": ["adminGroup"]},
  {"username": "guest", "password": "guest", "displayname": "Read Only", "groups": ["readGroup"]},
  {"username": "baldur", "password": "baldur", "displayname": "Read Only", "groups": ["adminGroup"]}
]


##############
# LDAP OPTIONS
##############

## LDAP connection settings. Both LDAPS and LDAP with StartTLS are supported

#lenses.security.ldap.url = # "ldaps://mycompany.com:636"
#lenses.security.ldap.base = # "OU=Users,DC=mycompany,DC=com"
#lenses.security.ldap.user =
#lenses.security.ldap.password =

## LDAP search filter. Please include `<user>` as Lenses will replace it at
## runtime with the user id.

#lenses.security.ldap.filter="(&(objectClass=person)(sAMAccountName=<user>))"

## LDAP roles retriever configuration. The default plugin will LDAP setups that
## support the memberOf function. You can implement your own if needed, look
## at https://github.com/Landoop/lenses-ldap-plugin-template

#lenses.security.ldap.plugin.class="com.landoop.lenses.security.ldap.LdapMemberOfUserGroupPlugin"
#lenses.security.ldap.plugin.group.extract.regex="(?i)CN=(\\w+),ou=ServiceGroups.*"
#lenses.security.ldap.plugin.memberof.key="memberOf"
#lenses.security.ldap.plugin.person.name.key = "sn"


##################
# KERBEROS OPTIONS
##################

#lenses.security.kerberos.service.principal= # "HTTP/lenses.host"
#lenses.security.kerberos.keytab= # /tmp/lenses.keytab
#lenses.security.kerberos.debug=false

## As Kerberos does not provide group information, you have to map
## users to groups manually.

#lenses.security.mappings = [
#  { "username": "sam@LANDOOP.COM", "groups": ["adminGroup", "userGroup"] },
#  { "username": "tom@LANDOOP.COM", "groups": ["userGroup"] }
#]


#####################
# CUSTOM_HTTP OPTIONS
#####################

## The only option needed is the classpath of the class that will extract
## authentication and authorization (group) information from the HTTP headers.
## The jar that includes this class, should be added to the Lenses plugins
## directory.

#lenses.security.plugin= # $my.custom.plugin.class.path


##################
# SERVICE ACCOUNTS
##################

## For service accounts you set directly the authorization token that will be used
## to authenticate to Lenses. Please use sufficiently long and random keys, as they
## will be used by code anyway.

#lenses.security.service.accounts=[
#  {
#    "username": "ci-server",
#    "token": "nytsDHtdxbv56dzGRds4",
#    "groups": ["group1", "group2"]
#  },
#  {
#    "username": "bi-tool",
#    "token": "fds54GSD6Bds3Ddfy3vz",
#    "groups": ["group3"]
#  }
#]
