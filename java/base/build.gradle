/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        maven {
            url 'http://baldur:8081/artifactory/plugins-release'
            
        }
        
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:+"
    }
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'libs-release-local'
            maven = true
            
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
            maven = true
            
        }
    }
}

description = 'Java Basics & Fundamentals'

apply plugin: 'java'
apply plugin: 'eclipse'
// this will give us the 'gradle run' task which will call the given class with the given args
apply plugin: 'application'
// this will generate a pom.xml and let us upload to a maven repo
apply plugin: 'maven'

mainClassName = 'com.bms.base.MainApplication'
run.args = ['Finnr']

// if archivesBaseName is not set the build/libs jar file will be named after the project (base.jar in this case)
archivesBaseName = "baldur"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // The production code uses Guava
    compile 'com.google.guava:guava:20.0'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
	compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212.jre7'
    

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// 'extend' builtin gradle task
// can call this from the root project with: gradlew base:copyPoem
task copyPoem(type:Copy) {
    group 'poetry'
    description 'copies xanadu.txt to the docs dir'
    from file("src/main/resources/xanadu.txt")
    into file("${buildDir}/docs")
}

// we'll upload only specific files when we call built-in uploadArchives

FileTree tree = fileTree("${rootDir}/base/src/main/java") {
    include '**/*.java'
    exclude '**/com/bms/notme'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Baldurite',
                   'Implementation-Version': version,
                   'Main-Class': 'com.bms.base.MainApplication'
    }
    onlyIf{true}
}

task list {
    doLast {
        tree.each {File file ->
            println file
        }
    }
}

task baldur {
    description = 'Root of the PC heirarchy'
    doFirst {
        println "baldur task"
        println artifactory_contextUrl
        println "the url is: ${artifactory_contextUrl}"
    }
}

task finnr(dependsOn: baldur) {
    doFirst {println "finnr task"}
}

task aldir(dependsOn: finnr) {
    doFirst {println "aldir task"}
}



// customize the repo we upload to (use file repo)
uploadArchives {
    repositories {
        //flatDir {dirs "${rootDir}/tempRepo"}
    }
}

