/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

// Apply the base plugin for top level project
apply plugin: 'base'
// Eclipse support
apply plugin: 'eclipse'

// set the wrapper version to lock it in
task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

// set the verison (for this and all subprojects)
allprojects {
    version = '0.1.0'
}

allprojects {
    task hello {
        doLast { boo ->
            println "I'm project $boo.project.name"
        }
    }
}

subprojects { subproject ->
    if (subproject.name.startsWith("mult")) {
        println "****Multiproject****"
    }
}

subprojects {
    hello {
        doLast {
            println "- I am a subproject"
        }
        afterEvaluate {Project project ->
            println "evaluating $project.name"
            if (project.hasProperty('pluginproject') && project.pluginproject) {
                println "--- this is a plugin project"
            }
        }
    }
}

project('multi:multi1').hello {
    doLast {
        println "-- sub-sub-project"
    }
}
project('multi:multi2').hello {
    doLast {
        println "-- sub-sub-project"
    }
}

// set some extra properties
ext.p1 = 'property 1'

// In this section you declare where to find the dependencies of your project
// note this is actually project.repositories: 
// https://docs.gradle.org/current/javadoc/index.html?org/gradle/api/Project.html
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    // you can specify your own repo
   // maven {
       // url 'http://baldur:8081/artifactory/ext-release-local'
  //  }
}

// jars to pull in
// note this is actually project.dependencies
dependencies {

}

task baldur {
    doLast() {
        println 'baldur is the best'
    }
}

// note brackets are optional on doFirst/Last
// always run baldur task first
task pinfo(dependsOn: baldur) {
    doFirst {
        println 'first'
        println "project name: ${project.name}"
        println "project version: ${project.version}"
        println p1
    }
    
    doLast {
        println 'last'
    }
}





