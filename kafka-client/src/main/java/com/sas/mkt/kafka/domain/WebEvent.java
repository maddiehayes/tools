/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sas.mkt.kafka.domain;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WebEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8146504047546815540L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WebEvent\",\"namespace\":\"com.sas.mkt.kafka.domain\",\"fields\":[{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"site\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ip\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tenant\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"ollivanders\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long time;
  @Deprecated public java.lang.String site;
  @Deprecated public java.lang.String ip;
  @Deprecated public java.lang.String tenant;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WebEvent() {}

  /**
   * All-args constructor.
   * @param time The new value for time
   * @param site The new value for site
   * @param ip The new value for ip
   * @param tenant The new value for tenant
   */
  public WebEvent(java.lang.Long time, java.lang.String site, java.lang.String ip, java.lang.String tenant) {
    this.time = time;
    this.site = site;
    this.ip = ip;
    this.tenant = tenant;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return site;
    case 2: return ip;
    case 3: return tenant;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Long)value$; break;
    case 1: site = (java.lang.String)value$; break;
    case 2: ip = (java.lang.String)value$; break;
    case 3: tenant = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'site' field.
   * @return The value of the 'site' field.
   */
  public java.lang.String getSite() {
    return site;
  }

  /**
   * Sets the value of the 'site' field.
   * @param value the value to set.
   */
  public void setSite(java.lang.String value) {
    this.site = value;
  }

  /**
   * Gets the value of the 'ip' field.
   * @return The value of the 'ip' field.
   */
  public java.lang.String getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.String value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'tenant' field.
   * @return The value of the 'tenant' field.
   */
  public java.lang.String getTenant() {
    return tenant;
  }

  /**
   * Sets the value of the 'tenant' field.
   * @param value the value to set.
   */
  public void setTenant(java.lang.String value) {
    this.tenant = value;
  }

  /**
   * Creates a new WebEvent RecordBuilder.
   * @return A new WebEvent RecordBuilder
   */
  public static com.sas.mkt.kafka.domain.WebEvent.Builder newBuilder() {
    return new com.sas.mkt.kafka.domain.WebEvent.Builder();
  }

  /**
   * Creates a new WebEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WebEvent RecordBuilder
   */
  public static com.sas.mkt.kafka.domain.WebEvent.Builder newBuilder(com.sas.mkt.kafka.domain.WebEvent.Builder other) {
    return new com.sas.mkt.kafka.domain.WebEvent.Builder(other);
  }

  /**
   * Creates a new WebEvent RecordBuilder by copying an existing WebEvent instance.
   * @param other The existing instance to copy.
   * @return A new WebEvent RecordBuilder
   */
  public static com.sas.mkt.kafka.domain.WebEvent.Builder newBuilder(com.sas.mkt.kafka.domain.WebEvent other) {
    return new com.sas.mkt.kafka.domain.WebEvent.Builder(other);
  }

  /**
   * RecordBuilder for WebEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WebEvent>
    implements org.apache.avro.data.RecordBuilder<WebEvent> {

    private long time;
    private java.lang.String site;
    private java.lang.String ip;
    private java.lang.String tenant;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sas.mkt.kafka.domain.WebEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.site)) {
        this.site = data().deepCopy(fields()[1].schema(), other.site);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ip)) {
        this.ip = data().deepCopy(fields()[2].schema(), other.ip);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tenant)) {
        this.tenant = data().deepCopy(fields()[3].schema(), other.tenant);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WebEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sas.mkt.kafka.domain.WebEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.site)) {
        this.site = data().deepCopy(fields()[1].schema(), other.site);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ip)) {
        this.ip = data().deepCopy(fields()[2].schema(), other.ip);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tenant)) {
        this.tenant = data().deepCopy(fields()[3].schema(), other.tenant);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.sas.mkt.kafka.domain.WebEvent.Builder setTime(long value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.sas.mkt.kafka.domain.WebEvent.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'site' field.
      * @return The value.
      */
    public java.lang.String getSite() {
      return site;
    }

    /**
      * Sets the value of the 'site' field.
      * @param value The value of 'site'.
      * @return This builder.
      */
    public com.sas.mkt.kafka.domain.WebEvent.Builder setSite(java.lang.String value) {
      validate(fields()[1], value);
      this.site = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'site' field has been set.
      * @return True if the 'site' field has been set, false otherwise.
      */
    public boolean hasSite() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'site' field.
      * @return This builder.
      */
    public com.sas.mkt.kafka.domain.WebEvent.Builder clearSite() {
      site = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ip' field.
      * @return The value.
      */
    public java.lang.String getIp() {
      return ip;
    }

    /**
      * Sets the value of the 'ip' field.
      * @param value The value of 'ip'.
      * @return This builder.
      */
    public com.sas.mkt.kafka.domain.WebEvent.Builder setIp(java.lang.String value) {
      validate(fields()[2], value);
      this.ip = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ip' field has been set.
      * @return True if the 'ip' field has been set, false otherwise.
      */
    public boolean hasIp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ip' field.
      * @return This builder.
      */
    public com.sas.mkt.kafka.domain.WebEvent.Builder clearIp() {
      ip = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenant' field.
      * @return The value.
      */
    public java.lang.String getTenant() {
      return tenant;
    }

    /**
      * Sets the value of the 'tenant' field.
      * @param value The value of 'tenant'.
      * @return This builder.
      */
    public com.sas.mkt.kafka.domain.WebEvent.Builder setTenant(java.lang.String value) {
      validate(fields()[3], value);
      this.tenant = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tenant' field has been set.
      * @return True if the 'tenant' field has been set, false otherwise.
      */
    public boolean hasTenant() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tenant' field.
      * @return This builder.
      */
    public com.sas.mkt.kafka.domain.WebEvent.Builder clearTenant() {
      tenant = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public WebEvent build() {
      try {
        WebEvent record = new WebEvent();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Long) defaultValue(fields()[0]);
        record.site = fieldSetFlags()[1] ? this.site : (java.lang.String) defaultValue(fields()[1]);
        record.ip = fieldSetFlags()[2] ? this.ip : (java.lang.String) defaultValue(fields()[2]);
        record.tenant = fieldSetFlags()[3] ? this.tenant : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
