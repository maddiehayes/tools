/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.examples.streams.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EnrichedOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -901208525857000178L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnrichedOrder\",\"namespace\":\"io.confluent.examples.streams.avro\",\"fields\":[{\"name\":\"product\",\"type\":{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"supplier_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"customer\",\"type\":{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gender\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"region\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"order\",\"type\":{\"type\":\"record\",\"name\":\"Order\",\"fields\":[{\"name\":\"customer_id\",\"type\":\"long\"},{\"name\":\"product_id\",\"type\":\"long\"},{\"name\":\"time_order_placed_at\",\"type\":\"long\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private io.confluent.examples.streams.avro.Product product;
   private io.confluent.examples.streams.avro.Customer customer;
   private io.confluent.examples.streams.avro.Order order;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnrichedOrder() {}

  /**
   * All-args constructor.
   * @param product The new value for product
   * @param customer The new value for customer
   * @param order The new value for order
   */
  public EnrichedOrder(io.confluent.examples.streams.avro.Product product, io.confluent.examples.streams.avro.Customer customer, io.confluent.examples.streams.avro.Order order) {
    this.product = product;
    this.customer = customer;
    this.order = order;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return product;
    case 1: return customer;
    case 2: return order;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: product = (io.confluent.examples.streams.avro.Product)value$; break;
    case 1: customer = (io.confluent.examples.streams.avro.Customer)value$; break;
    case 2: order = (io.confluent.examples.streams.avro.Order)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public io.confluent.examples.streams.avro.Product getProduct() {
    return product;
  }

  /**
   * Sets the value of the 'product' field.
   * @param value the value to set.
   */
  public void setProduct(io.confluent.examples.streams.avro.Product value) {
    this.product = value;
  }

  /**
   * Gets the value of the 'customer' field.
   * @return The value of the 'customer' field.
   */
  public io.confluent.examples.streams.avro.Customer getCustomer() {
    return customer;
  }

  /**
   * Sets the value of the 'customer' field.
   * @param value the value to set.
   */
  public void setCustomer(io.confluent.examples.streams.avro.Customer value) {
    this.customer = value;
  }

  /**
   * Gets the value of the 'order' field.
   * @return The value of the 'order' field.
   */
  public io.confluent.examples.streams.avro.Order getOrder() {
    return order;
  }

  /**
   * Sets the value of the 'order' field.
   * @param value the value to set.
   */
  public void setOrder(io.confluent.examples.streams.avro.Order value) {
    this.order = value;
  }

  /**
   * Creates a new EnrichedOrder RecordBuilder.
   * @return A new EnrichedOrder RecordBuilder
   */
  public static io.confluent.examples.streams.avro.EnrichedOrder.Builder newBuilder() {
    return new io.confluent.examples.streams.avro.EnrichedOrder.Builder();
  }

  /**
   * Creates a new EnrichedOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnrichedOrder RecordBuilder
   */
  public static io.confluent.examples.streams.avro.EnrichedOrder.Builder newBuilder(io.confluent.examples.streams.avro.EnrichedOrder.Builder other) {
    return new io.confluent.examples.streams.avro.EnrichedOrder.Builder(other);
  }

  /**
   * Creates a new EnrichedOrder RecordBuilder by copying an existing EnrichedOrder instance.
   * @param other The existing instance to copy.
   * @return A new EnrichedOrder RecordBuilder
   */
  public static io.confluent.examples.streams.avro.EnrichedOrder.Builder newBuilder(io.confluent.examples.streams.avro.EnrichedOrder other) {
    return new io.confluent.examples.streams.avro.EnrichedOrder.Builder(other);
  }

  /**
   * RecordBuilder for EnrichedOrder instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnrichedOrder>
    implements org.apache.avro.data.RecordBuilder<EnrichedOrder> {

    private io.confluent.examples.streams.avro.Product product;
    private io.confluent.examples.streams.avro.Product.Builder productBuilder;
    private io.confluent.examples.streams.avro.Customer customer;
    private io.confluent.examples.streams.avro.Customer.Builder customerBuilder;
    private io.confluent.examples.streams.avro.Order order;
    private io.confluent.examples.streams.avro.Order.Builder orderBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.examples.streams.avro.EnrichedOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = true;
      }
      if (other.hasProductBuilder()) {
        this.productBuilder = io.confluent.examples.streams.avro.Product.newBuilder(other.getProductBuilder());
      }
      if (isValidValue(fields()[1], other.customer)) {
        this.customer = data().deepCopy(fields()[1].schema(), other.customer);
        fieldSetFlags()[1] = true;
      }
      if (other.hasCustomerBuilder()) {
        this.customerBuilder = io.confluent.examples.streams.avro.Customer.newBuilder(other.getCustomerBuilder());
      }
      if (isValidValue(fields()[2], other.order)) {
        this.order = data().deepCopy(fields()[2].schema(), other.order);
        fieldSetFlags()[2] = true;
      }
      if (other.hasOrderBuilder()) {
        this.orderBuilder = io.confluent.examples.streams.avro.Order.newBuilder(other.getOrderBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EnrichedOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.examples.streams.avro.EnrichedOrder other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = true;
      }
      this.productBuilder = null;
      if (isValidValue(fields()[1], other.customer)) {
        this.customer = data().deepCopy(fields()[1].schema(), other.customer);
        fieldSetFlags()[1] = true;
      }
      this.customerBuilder = null;
      if (isValidValue(fields()[2], other.order)) {
        this.order = data().deepCopy(fields()[2].schema(), other.order);
        fieldSetFlags()[2] = true;
      }
      this.orderBuilder = null;
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public io.confluent.examples.streams.avro.Product getProduct() {
      return product;
    }

    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder setProduct(io.confluent.examples.streams.avro.Product value) {
      validate(fields()[0], value);
      this.productBuilder = null;
      this.product = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'product' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.confluent.examples.streams.avro.Product.Builder getProductBuilder() {
      if (productBuilder == null) {
        if (hasProduct()) {
          setProductBuilder(io.confluent.examples.streams.avro.Product.newBuilder(product));
        } else {
          setProductBuilder(io.confluent.examples.streams.avro.Product.newBuilder());
        }
      }
      return productBuilder;
    }

    /**
     * Sets the Builder instance for the 'product' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder setProductBuilder(io.confluent.examples.streams.avro.Product.Builder value) {
      clearProduct();
      productBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'product' field has an active Builder instance
     * @return True if the 'product' field has an active Builder instance
     */
    public boolean hasProductBuilder() {
      return productBuilder != null;
    }

    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder clearProduct() {
      product = null;
      productBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer' field.
      * @return The value.
      */
    public io.confluent.examples.streams.avro.Customer getCustomer() {
      return customer;
    }

    /**
      * Sets the value of the 'customer' field.
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder setCustomer(io.confluent.examples.streams.avro.Customer value) {
      validate(fields()[1], value);
      this.customerBuilder = null;
      this.customer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'customer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.confluent.examples.streams.avro.Customer.Builder getCustomerBuilder() {
      if (customerBuilder == null) {
        if (hasCustomer()) {
          setCustomerBuilder(io.confluent.examples.streams.avro.Customer.newBuilder(customer));
        } else {
          setCustomerBuilder(io.confluent.examples.streams.avro.Customer.newBuilder());
        }
      }
      return customerBuilder;
    }

    /**
     * Sets the Builder instance for the 'customer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder setCustomerBuilder(io.confluent.examples.streams.avro.Customer.Builder value) {
      clearCustomer();
      customerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customer' field has an active Builder instance
     * @return True if the 'customer' field has an active Builder instance
     */
    public boolean hasCustomerBuilder() {
      return customerBuilder != null;
    }

    /**
      * Clears the value of the 'customer' field.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder clearCustomer() {
      customer = null;
      customerBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'order' field.
      * @return The value.
      */
    public io.confluent.examples.streams.avro.Order getOrder() {
      return order;
    }

    /**
      * Sets the value of the 'order' field.
      * @param value The value of 'order'.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder setOrder(io.confluent.examples.streams.avro.Order value) {
      validate(fields()[2], value);
      this.orderBuilder = null;
      this.order = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'order' field has been set.
      * @return True if the 'order' field has been set, false otherwise.
      */
    public boolean hasOrder() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'order' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.confluent.examples.streams.avro.Order.Builder getOrderBuilder() {
      if (orderBuilder == null) {
        if (hasOrder()) {
          setOrderBuilder(io.confluent.examples.streams.avro.Order.newBuilder(order));
        } else {
          setOrderBuilder(io.confluent.examples.streams.avro.Order.newBuilder());
        }
      }
      return orderBuilder;
    }

    /**
     * Sets the Builder instance for the 'order' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder setOrderBuilder(io.confluent.examples.streams.avro.Order.Builder value) {
      clearOrder();
      orderBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'order' field has an active Builder instance
     * @return True if the 'order' field has an active Builder instance
     */
    public boolean hasOrderBuilder() {
      return orderBuilder != null;
    }

    /**
      * Clears the value of the 'order' field.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.EnrichedOrder.Builder clearOrder() {
      order = null;
      orderBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public EnrichedOrder build() {
      try {
        EnrichedOrder record = new EnrichedOrder();
        if (productBuilder != null) {
          record.product = this.productBuilder.build();
        } else {
          record.product = fieldSetFlags()[0] ? this.product : (io.confluent.examples.streams.avro.Product) defaultValue(fields()[0]);
        }
        if (customerBuilder != null) {
          record.customer = this.customerBuilder.build();
        } else {
          record.customer = fieldSetFlags()[1] ? this.customer : (io.confluent.examples.streams.avro.Customer) defaultValue(fields()[1]);
        }
        if (orderBuilder != null) {
          record.order = this.orderBuilder.build();
        } else {
          record.order = fieldSetFlags()[2] ? this.order : (io.confluent.examples.streams.avro.Order) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
