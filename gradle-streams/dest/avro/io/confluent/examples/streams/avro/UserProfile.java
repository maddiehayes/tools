/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.examples.streams.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserProfile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1023001266323107863L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserProfile\",\"namespace\":\"io.confluent.examples.streams.avro\",\"fields\":[{\"name\":\"experience\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"region\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.String experience;
   private java.lang.String region;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserProfile() {}

  /**
   * All-args constructor.
   * @param experience The new value for experience
   * @param region The new value for region
   */
  public UserProfile(java.lang.String experience, java.lang.String region) {
    this.experience = experience;
    this.region = region;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return experience;
    case 1: return region;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: experience = (java.lang.String)value$; break;
    case 1: region = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'experience' field.
   * @return The value of the 'experience' field.
   */
  public java.lang.String getExperience() {
    return experience;
  }

  /**
   * Sets the value of the 'experience' field.
   * @param value the value to set.
   */
  public void setExperience(java.lang.String value) {
    this.experience = value;
  }

  /**
   * Gets the value of the 'region' field.
   * @return The value of the 'region' field.
   */
  public java.lang.String getRegion() {
    return region;
  }

  /**
   * Sets the value of the 'region' field.
   * @param value the value to set.
   */
  public void setRegion(java.lang.String value) {
    this.region = value;
  }

  /**
   * Creates a new UserProfile RecordBuilder.
   * @return A new UserProfile RecordBuilder
   */
  public static io.confluent.examples.streams.avro.UserProfile.Builder newBuilder() {
    return new io.confluent.examples.streams.avro.UserProfile.Builder();
  }

  /**
   * Creates a new UserProfile RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserProfile RecordBuilder
   */
  public static io.confluent.examples.streams.avro.UserProfile.Builder newBuilder(io.confluent.examples.streams.avro.UserProfile.Builder other) {
    return new io.confluent.examples.streams.avro.UserProfile.Builder(other);
  }

  /**
   * Creates a new UserProfile RecordBuilder by copying an existing UserProfile instance.
   * @param other The existing instance to copy.
   * @return A new UserProfile RecordBuilder
   */
  public static io.confluent.examples.streams.avro.UserProfile.Builder newBuilder(io.confluent.examples.streams.avro.UserProfile other) {
    return new io.confluent.examples.streams.avro.UserProfile.Builder(other);
  }

  /**
   * RecordBuilder for UserProfile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserProfile>
    implements org.apache.avro.data.RecordBuilder<UserProfile> {

    private java.lang.String experience;
    private java.lang.String region;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.examples.streams.avro.UserProfile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.experience)) {
        this.experience = data().deepCopy(fields()[0].schema(), other.experience);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.region)) {
        this.region = data().deepCopy(fields()[1].schema(), other.region);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserProfile instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.examples.streams.avro.UserProfile other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.experience)) {
        this.experience = data().deepCopy(fields()[0].schema(), other.experience);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.region)) {
        this.region = data().deepCopy(fields()[1].schema(), other.region);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'experience' field.
      * @return The value.
      */
    public java.lang.String getExperience() {
      return experience;
    }

    /**
      * Sets the value of the 'experience' field.
      * @param value The value of 'experience'.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.UserProfile.Builder setExperience(java.lang.String value) {
      validate(fields()[0], value);
      this.experience = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'experience' field has been set.
      * @return True if the 'experience' field has been set, false otherwise.
      */
    public boolean hasExperience() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'experience' field.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.UserProfile.Builder clearExperience() {
      experience = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'region' field.
      * @return The value.
      */
    public java.lang.String getRegion() {
      return region;
    }

    /**
      * Sets the value of the 'region' field.
      * @param value The value of 'region'.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.UserProfile.Builder setRegion(java.lang.String value) {
      validate(fields()[1], value);
      this.region = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'region' field has been set.
      * @return True if the 'region' field has been set, false otherwise.
      */
    public boolean hasRegion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'region' field.
      * @return This builder.
      */
    public io.confluent.examples.streams.avro.UserProfile.Builder clearRegion() {
      region = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public UserProfile build() {
      try {
        UserProfile record = new UserProfile();
        record.experience = fieldSetFlags()[0] ? this.experience : (java.lang.String) defaultValue(fields()[0]);
        record.region = fieldSetFlags()[1] ? this.region : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
